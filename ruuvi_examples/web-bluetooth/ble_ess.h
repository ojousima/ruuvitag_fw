/* This file was generated by plugin 'Nordic Semiconductor nRF5x v.1.2.2' (BDS version 1.1.3135.0) */

#ifndef BLE_ESS_H__
#define BLE_ESS_H__

#include <stdint.h>
#include <stdbool.h>
#include "ble.h"
#include "ble_srv_common.h"
#include "app_util_bds.h"


// Error codes 
#define WRITE_REQUEST_REJECTED 0x80; /* An attempt was made to write a value to the descriptor that is invalid or not supported by this Server. */
#define CONDITION_NOT_SUPPORTED 0x81; /* An attempt was made to write a value to the Condition field of the ES Trigger Setting descriptor that is invalid or not supported by this Server. */

/**@brief Environmental Sensing event type. */
typedef enum
{ 
    BLE_ESS_PRESSURE_EVT_NOTIFICATION_ENABLED,  /**< Pressure value notification enabled event. */
    BLE_ESS_PRESSURE_EVT_NOTIFICATION_DISABLED, /**< Pressure value notification disabled event. */
    BLE_ESS_PRESSURE_EVT_CCCD_WRITE, /**< Pressure CCCD write event. */
    BLE_ESS_TEMPERATURE_EVT_NOTIFICATION_ENABLED,  /**< Temperature value notification enabled event. */
    BLE_ESS_TEMPERATURE_EVT_NOTIFICATION_DISABLED, /**< Temperature value notification disabled event. */
    BLE_ESS_TEMPERATURE_EVT_CCCD_WRITE, /**< Temperature CCCD write event. */
    BLE_ESS_HUMIDITY_EVT_NOTIFICATION_ENABLED,  /**< Humidity value notification enabled event. */
    BLE_ESS_HUMIDITY_EVT_NOTIFICATION_DISABLED, /**< Humidity value notification disabled event. */
    BLE_ESS_BAROMETRIC_PRESSURE_TREND_EVT_NOTIFICATION_ENABLED,  /**< Barometric Pressure Trend value notification enabled event. */
    BLE_ESS_BAROMETRIC_PRESSURE_TREND_EVT_NOTIFICATION_DISABLED, /**< Barometric Pressure Trend value notification disabled event. */
} ble_ess_evt_type_t;

// Forward declaration of the ble_ess_t type.
typedef struct ble_ess_s ble_ess_t;






typedef enum
{ 
    BAROMETRIC_PRESSURE_TREND_UNKNOWN = 0, 
    BAROMETRIC_PRESSURE_TREND_CONTINUOUSLY_FALLING = 1, 
    BAROMETRIC_PRESSURE_TREND_CONTINUOUSLY_RISING = 2, 
    BAROMETRIC_PRESSURE_TREND_FALLING__THEN_STEADY = 3, 
    BAROMETRIC_PRESSURE_TREND_RISING__THEN_STEADY = 4, 
    BAROMETRIC_PRESSURE_TREND_FALLING_BEFORE_A_LESSER_RISE = 5, 
    BAROMETRIC_PRESSURE_TREND_FALLING_BEFORE_A_GREATER_RISE = 6, 
    BAROMETRIC_PRESSURE_TREND_RISING_BEFORE_A_GREATER_FALL = 7, 
    BAROMETRIC_PRESSURE_TREND_RISING_BEFORE_A_LESSER_FALL = 8, 
    BAROMETRIC_PRESSURE_TREND_STEADY = 9, 
} enum_barometric_pressure_trend_t; 
typedef struct
{
    enum_barometric_pressure_trend_t barometric_pressure_trend; 
} barometric_pressure_trend_barometric_pressure_trend_t; 


/**@brief Pressure structure. */
typedef struct
{
    uint32_t pressure;
} ble_ess_pressure_t;
/**@brief Temperature structure. */
typedef struct
{
    int16_t temperature;
} ble_ess_temperature_t;
/**@brief Humidity structure. */
typedef struct
{
    uint16_t humidity;
} ble_ess_humidity_t;
/**@brief Barometric Pressure Trend structure. */
typedef struct
{
    barometric_pressure_trend_barometric_pressure_trend_t barometric_pressure_trend;
} ble_ess_barometric_pressure_trend_t;

/**@brief Environmental Sensing Service event. */
typedef struct
{
    ble_ess_evt_type_t evt_type;    /**< Type of event. */
    union {
        uint16_t cccd_value; /**< Holds decoded data in Notify and Indicate event handler. */
    } params;
} ble_ess_evt_t;

/**@brief Environmental Sensing Service event handler type. */
typedef void (*ble_ess_evt_handler_t) (ble_ess_t * p_ess, ble_ess_evt_t * p_evt);

/**@brief Environmental Sensing Service init structure. This contains all options and data needed for initialization of the service */
typedef struct
{
    ble_ess_evt_handler_t     evt_handler; /**< Event handler to be called for handling events in the Environmental Sensing Service. */
    bool is_pressure_notify_supported;    /**< TRUE if notification of Pressure is supported. */
    ble_ess_pressure_t ble_ess_pressure_initial_value; /**< If not NULL, initial value of the Pressure characteristic. */ 
    bool is_temperature_notify_supported;    /**< TRUE if notification of Temperature is supported. */
    ble_ess_temperature_t ble_ess_temperature_initial_value; /**< If not NULL, initial value of the Temperature characteristic. */ 
    ble_ess_humidity_t ble_ess_humidity_initial_value; /**< If not NULL, initial value of the Humidity characteristic. */ 
    ble_ess_barometric_pressure_trend_t ble_ess_barometric_pressure_trend_initial_value; /**< If not NULL, initial value of the Barometric Pressure Trend characteristic. */ 
} ble_ess_init_t;

/**@brief Environmental Sensing Service structure. This contains various status information for the service.*/
struct ble_ess_s
{
    ble_ess_evt_handler_t evt_handler; /**< Event handler to be called for handling events in the Environmental Sensing Service. */
    uint16_t service_handle; /**< Handle of Environmental Sensing Service (as provided by the BLE stack). */
    bool is_pressure_notify_supported;    /**< TRUE if notification of Pressure is supported. */
    ble_gatts_char_handles_t pressure_handles; /**< Handles related to the Pressure characteristic. */
    bool is_temperature_notify_supported;    /**< TRUE if notification of Temperature is supported. */
    ble_gatts_char_handles_t temperature_handles; /**< Handles related to the Temperature characteristic. */
    ble_gatts_char_handles_t humidity_handles; /**< Handles related to the Humidity characteristic. */
    ble_gatts_char_handles_t barometric_pressure_trend_handles; /**< Handles related to the Barometric Pressure Trend characteristic. */
    uint16_t conn_handle; /**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). */
};

/**@brief Function for initializing the Environmental Sensing.
 *
 * @param[out]  p_ess       Environmental Sensing Service structure. This structure will have to be supplied by
 *                          the application. It will be initialized by this function, and will later
 *                          be used to identify this particular service instance.
 * @param[in]   p_ess_init  Information needed to initialize the service.
 *
 * @return      NRF_SUCCESS on successful initialization of service, otherwise an error code.
 */
uint32_t ble_ess_init(ble_ess_t * p_ess, const ble_ess_init_t * p_ess_init);

/**@brief Function for handling the Application's BLE Stack events.*/
void ble_ess_on_ble_evt(ble_ess_t * p_ess, ble_evt_t * p_ble_evt);

/**@brief Function for setting the Pressure.
 *
 * @details Sets a new value of the Pressure characteristic. The new value will be sent
 *          to the client the next time the client reads the Pressure characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_ess                 Environmental Sensing Service structure.
 * @param[in]   p_pressure  New Pressure.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_ess_pressure_set(ble_ess_t * p_ess, ble_ess_pressure_t * p_pressure);

/**@brief Function for sending the Pressure.
 *
 * @details The application calls this function after having performed a pressure.
 *          The pressure data is encoded and sent to the client.
 *          This function is only generated if the characteristic's Notify or Indicate property is not 'Excluded'.
 *
 * @param[in]   p_ess                    Environmental Sensing Service structure.
 * @param[in]   p_pressure               New pressure.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_ess_pressure_send(ble_ess_t * p_ess, ble_ess_pressure_t * p_pressure);

/**@brief Function for setting the Temperature.
 *
 * @details Sets a new value of the Temperature characteristic. The new value will be sent
 *          to the client the next time the client reads the Temperature characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_ess                 Environmental Sensing Service structure.
 * @param[in]   p_temperature  New Temperature.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_ess_temperature_set(ble_ess_t * p_ess, ble_ess_temperature_t * p_temperature);

/**@brief Function for sending the Temperature.
 *
 * @details The application calls this function after having performed a temperature.
 *          The temperature data is encoded and sent to the client.
 *          This function is only generated if the characteristic's Notify or Indicate property is not 'Excluded'.
 *
 * @param[in]   p_ess                    Environmental Sensing Service structure.
 * @param[in]   p_temperature               New temperature.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_ess_temperature_send(ble_ess_t * p_ess, ble_ess_temperature_t * p_temperature);

/**@brief Function for setting the Barometric Pressure Trend.
 *
 * @details Sets a new value of the Barometric Pressure Trend characteristic. The new value will be sent
 *          to the client the next time the client reads the Barometric Pressure Trend characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_ess                 Environmental Sensing Service structure.
 * @param[in]   p_barometric_pressure_trend  New Barometric Pressure Trend.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_ess_barometric_pressure_trend_set(ble_ess_t * p_ess, ble_ess_barometric_pressure_trend_t * p_barometric_pressure_trend);

#endif //_BLE_ESS_H__
